  #define RXD2 16
#define TXD2 17

#include <TinyGPS++.h>

#include "WiFi.h"
TinyGPSPlus gps;

#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <ArduinoJson.h>
const char *filename = "/ShreveportWiFi.txt"; 
int atBase = 0;
int APConnected = 0;

const char *ssid = "yourAP";
const char *password = "0000011111";
WiFiServer server(80);
void setup()
{
   Serial.begin(115200);

  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);

    // Set WiFi to station mode and disconnect from an AP if it was previously connected
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);
if(!SD.begin()){
        Serial.println("Card Mount Failed");
        return;
    }
     File file = SD.open(filename, FILE_APPEND);

     if (file) {
        file.println("MacAddress,SSID,Lat,Lon,dB,Encryption");
        file.close();
       // print to the serial port too:
      //Serial.println(dataString);
     }
      // if the file isn't open, pop up an error:
      else {
        Serial.println("error opening datalog.txt");
      }
       delay(10);
     WiFi.softAP(ssid, password);
  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  server.begin();
    Serial.println("Setup done");
}
String dataString = "";
void loop()

{
   
 WiFiClient client = server.available(); 
if (client) {
  int n = WiFi.scanNetworks();
    static char lattoutstr[15];
  static char lonoutstr[15];
  dtostrf(gps.location.lat(),7, 6, lattoutstr);
  dtostrf(gps.location.lng(),7, 6, lonoutstr);
  for (int i = 0; i < n; ++i) {
     dataString += String(WiFi.BSSIDstr(i));
     dataString += ",";
     dataString +=WiFi.SSID(i);
     dataString += ",";
     dataString +=lattoutstr;
     dataString += ",";
     dataString += lonoutstr;
     dataString += ",";
     dataString += WiFi.RSSI(i);
     dataString += ",";
     dataString += WiFi.encryptionType(i);
     dataString += "<br />";
  }
    //Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
  
    while (client.connected()) {
      if (client.available()) {
        
      
        
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connection: close");
          client.println("Refresh: 5");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          client.print("<h1>Wifi Networks</h1>");
          
            
            client.print(dataString);
            

            client.println("<br />");
          
          client.println("</html>");
         
     
      }

    delay(500);
    // close the connection:
    client.stop();
    dataString = "";
    //Serial.println("client disconnected");
    }
 }
  while (Serial2.available())
      gps.encode(Serial2.read());
  
static const double Home_LAT = 38.926397, Home_LON = -77.6963497;
//static const double Home_LAT = 38.626221, Home_LON = -77.702514;

       double distanceToHome =
        TinyGPSPlus::distanceBetween(
          gps.location.lat(),
          gps.location.lng(),
          Home_LAT, 
          Home_LON);
          Serial.println(gps.location.lat());
 Serial.println(gps.location.lng());
 double distenceFromBase = distanceToHome/1000 * 0.6213;
 //Serial.println(distanceToHome);
 //Serial.println(distenceFromBase);
if(distenceFromBase<.1){
  atBase = 1;
}
  else{
    atBase = 0;
    }
  if(atBase == 0){
    Serial.println("startRecording");
   WiFi.disconnect();
   APConnected = 0;
    // WiFi.scanNetworks will return the number of networks found
    int n = WiFi.scanNetworks();
    
    if (n == 0) {
        //Serial.println("no networks found");
    } else {
        //Serial.print(n);
        //Serial.println(" networks found");
        for (int i = 0; i < n; ++i) {

          
            
            // Print SSID and RSSI for each network found
          String dataString = "";
String encryptiontype = "";
  static char lattoutstr[15];
  static char lonoutstr[15];
  dtostrf(gps.location.lat(),7, 6, lattoutstr);
  dtostrf(gps.location.lng(),7, 6, lonoutstr);


  dataString += String(WiFi.BSSIDstr(i));
     dataString += ",";
     dataString +=WiFi.SSID(i);
     dataString += ",";
     dataString +=lattoutstr;
     dataString += ",";
     dataString += lonoutstr;
     dataString += ",";
     dataString += WiFi.RSSI(i);
     dataString += ",";
     dataString += WiFi.encryptionType(i);
     Serial.println(dataString);
      File file = SD.open(filename, FILE_APPEND);

     if (file) {
        file.println(dataString);
        dataString = "";
        file.close();
       // print to the serial port too:
      
     }
      // if the file isn't open, pop up an error:
      else {
        Serial.println("error opening datalog.txt");
      }
       delay(10);
    }
    }
    Serial.println("");

    // Wait a bit before scanning again
    delay(250);
    } 
    if(atBase == 1 && APConnected == 0){
      Serial.println("stopRecording");
      
      const char* ssid     = "Sorrento2";
const char* password = "0000011111";
      //Serial.println();
    //Serial.println();
    //Serial.print("Connecting to ");
    //Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }

    //Serial.println("");
    //Serial.println("WiFi connected");
    //Serial.println("IP address: ");
    //Serial.println(WiFi.localIP());
      APConnected = 1;
      }
      if(atBase == 1 && APConnected == 1){
      Serial.println("stopRecording");
      delay(1000);
      }
}
